
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001d  00800060  00800060  0000027a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d3  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000288  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014b  00000000  00000000  000005f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001cf  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010d  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000082  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 37       	cpi	r26, 0x7D	; 125
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_adcreg>:
unsigned char mesurement = 0;
unsigned char temp2;

void init_adcreg()
{
	DDRD = 0xFF; ; //set portd as output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	81 bb       	out	0x11, r24	; 17
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0); // set adc-prescaler, set adc enable and adc interrupt enable
  80:	86 b1       	in	r24, 0x06	; 6
  82:	8b 68       	ori	r24, 0x8B	; 139
  84:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0) | (1 << ADLAR); // set adv vcc ref
  86:	87 b1       	in	r24, 0x07	; 7
  88:	80 66       	ori	r24, 0x60	; 96
  8a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= adc_ch;
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	90 91 60 00 	lds	r25, 0x0060
  92:	89 2b       	or	r24, r25
  94:	87 b9       	out	0x07, r24	; 7
}
  96:	08 95       	ret

00000098 <read_sensors>:

//läser av alla ir-sensorer och sparar ner dessa
void read_sensors()
{
	mode = read_mode;
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	80 93 61 00 	sts	0x0061, r24
	adc_ch = 0;
  9e:	10 92 60 00 	sts	0x0060, r1
	ADMUX &= 0xE0;
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	80 7e       	andi	r24, 0xE0	; 224
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6

}
  aa:	08 95       	ret

000000ac <get_measurements>:

unsigned char get_measurements(unsigned char sensor, unsigned char row)
{
  ac:	e8 2f       	mov	r30, r24
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	ee 0f       	add	r30, r30
  b6:	ff 1f       	adc	r31, r31
  b8:	e6 0f       	add	r30, r22
  ba:	f1 1d       	adc	r31, r1
  bc:	eb 59       	subi	r30, 0x9B	; 155
  be:	ff 4f       	sbci	r31, 0xFF	; 255
	return measurements[sensor][row];
}
  c0:	80 81       	ld	r24, Z
  c2:	08 95       	ret

000000c4 <set_measurements>:

void set_measurements(unsigned char sensor, unsigned char row, unsigned char data)
{
	measurements[sensor][row] = data;
  c4:	e8 2f       	mov	r30, r24
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e6 0f       	add	r30, r22
  d2:	f1 1d       	adc	r31, r1
  d4:	eb 59       	subi	r30, 0x9B	; 155
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	40 83       	st	Z, r20
}
  da:	08 95       	ret

000000dc <decide_side_wall>:

unsigned char decide_side_wall()
{
	read_sensors();
  dc:	0e 94 4c 00 	call	0x98	; 0x98 <read_sensors>

	//Vänta tills alla avläsningar är klara
	while(mode != no_mode);
  e0:	80 91 61 00 	lds	r24, 0x0061
  e4:	88 23       	and	r24, r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <decide_side_wall+0x4>
	
	unsigned char i;
	unsigned char value = abs((get_measurements(0, 0) / 2) + 
  e8:	90 91 65 00 	lds	r25, 0x0065
  ec:	96 95       	lsr	r25
  ee:	80 91 79 00 	lds	r24, 0x0079
  f2:	86 95       	lsr	r24
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	29 0f       	add	r18, r25
  fa:	31 1d       	adc	r19, r1
  fc:	2a 53       	subi	r18, 0x3A	; 58
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	37 ff       	sbrs	r19, 7
 102:	03 c0       	rjmp	.+6      	; 0x10a <decide_side_wall+0x2e>
 104:	30 95       	com	r19
 106:	21 95       	neg	r18
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	72 2f       	mov	r23, r18
 10c:	e6 e6       	ldi	r30, 0x66	; 102
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	65 e0       	ldi	r22, 0x05	; 5
	unsigned char direction = 5;

	for(i = 0; i < 5; i++)
	{
		unsigned char temp;
		temp = abs((get_measurements(i + 1, 1) / 2) 
 114:	54 2f       	mov	r21, r20
 116:	5f 5f       	subi	r21, 0xFF	; 255
 118:	94 81       	ldd	r25, Z+4	; 0x04
 11a:	96 95       	lsr	r25
 11c:	80 81       	ld	r24, Z
 11e:	86 95       	lsr	r24
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	29 0f       	add	r18, r25
 126:	31 1d       	adc	r19, r1
 128:	2a 53       	subi	r18, 0x3A	; 58
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	37 ff       	sbrs	r19, 7
 12e:	03 c0       	rjmp	.+6      	; 0x136 <decide_side_wall+0x5a>
 130:	30 95       	com	r19
 132:	21 95       	neg	r18
 134:	3f 4f       	sbci	r19, 0xFF	; 255
		+ (get_measurements(i, 1) / 2) - wall_dist_1);
		
		//PORTD = temp;
		
		if(temp < value)
 136:	27 17       	cp	r18, r23
 138:	18 f4       	brcc	.+6      	; 0x140 <decide_side_wall+0x64>
		{
			value = temp;
			direction = i;
			PORTD = i;
 13a:	42 bb       	out	0x12, r20	; 18
 13c:	72 2f       	mov	r23, r18
 13e:	64 2f       	mov	r22, r20
 140:	34 96       	adiw	r30, 0x04	; 4
	unsigned char i;
	unsigned char value = abs((get_measurements(0, 0) / 2) + 
							  (get_measurements(5, 0) / 2) - wall_dist_1);
	unsigned char direction = 5;

	for(i = 0; i < 5; i++)
 142:	55 30       	cpi	r21, 0x05	; 5
 144:	11 f0       	breq	.+4      	; 0x14a <decide_side_wall+0x6e>
 146:	45 2f       	mov	r20, r21
 148:	e5 cf       	rjmp	.-54     	; 0x114 <decide_side_wall+0x38>
			PORTD = i;
		}
		
	}
	return direction;
}
 14a:	86 2f       	mov	r24, r22
 14c:	08 95       	ret

0000014e <main>:

int main()
{	
	init_adcreg();
 14e:	0e 94 3e 00 	call	0x7c	; 0x7c <init_adcreg>
	sei(); //enable interrupts
 152:	78 94       	sei
		


	read_sensors();
 154:	0e 94 4c 00 	call	0x98	; 0x98 <read_sensors>
	int tempa = (get_measurements(0, 0) + get_measurements(0, 1) +
	get_measurements(0, 2) + get_measurements(0, 3))/4;
	PORTD = tempa;
 158:	20 91 66 00 	lds	r18, 0x0066
 15c:	80 91 65 00 	lds	r24, 0x0065
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	82 0f       	add	r24, r18
 164:	91 1d       	adc	r25, r1
 166:	20 91 67 00 	lds	r18, 0x0067
 16a:	82 0f       	add	r24, r18
 16c:	91 1d       	adc	r25, r1
 16e:	20 91 68 00 	lds	r18, 0x0068
 172:	82 0f       	add	r24, r18
 174:	91 1d       	adc	r25, r1
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	82 bb       	out	0x12, r24	; 18
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x32>

00000182 <__vector_14>:

	return 0;
}

ISR(ADC_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	
	switch(mode)
 196:	80 91 61 00 	lds	r24, 0x0061
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	41 f5       	brne	.+80     	; 0x1ee <__vector_14+0x6c>
	{	
		case read_mode:
		{
			if(reads < max_number_reads)
 19e:	20 91 62 00 	lds	r18, 0x0062
 1a2:	24 30       	cpi	r18, 0x04	; 4
 1a4:	00 f5       	brcc	.+64     	; 0x1e6 <__vector_14+0x64>
			{
				unsigned char adc = ADCH;
 1a6:	85 b1       	in	r24, 0x05	; 5

				set_measurements(adc_ch, reads, adc);
 1a8:	90 91 60 00 	lds	r25, 0x0060
	return measurements[sensor][row];
}

void set_measurements(unsigned char sensor, unsigned char row, unsigned char data)
{
	measurements[sensor][row] = data;
 1ac:	e9 2f       	mov	r30, r25
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e2 0f       	add	r30, r18
 1ba:	f1 1d       	adc	r31, r1
 1bc:	eb 59       	subi	r30, 0x9B	; 155
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 83       	st	Z, r24
				unsigned char adc = ADCH;

				set_measurements(adc_ch, reads, adc);


				if(adc_ch < 6)
 1c2:	96 30       	cpi	r25, 0x06	; 6
 1c4:	30 f4       	brcc	.+12     	; 0x1d2 <__vector_14+0x50>
				{
					adc_ch += 1;
 1c6:	9f 5f       	subi	r25, 0xFF	; 255
 1c8:	90 93 60 00 	sts	0x0060, r25
					ADMUX += 1;
 1cc:	87 b1       	in	r24, 0x07	; 7
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <__vector_14+0x5e>

				}
				else
				{
					reads += 1;
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	20 93 62 00 	sts	0x0062, r18
					adc_ch = 0;
 1d8:	10 92 60 00 	sts	0x0060, r1
					ADMUX &= 0xE0;
 1dc:	87 b1       	in	r24, 0x07	; 7
 1de:	80 7e       	andi	r24, 0xE0	; 224
 1e0:	87 b9       	out	0x07, r24	; 7
				}

				ADCSRA |= (1 << ADSC);
 1e2:	36 9a       	sbi	0x06, 6	; 6
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__vector_14+0x6c>
			}
			else
			{
				reads = 0;
 1e6:	10 92 62 00 	sts	0x0062, r1
				mode = no_mode;
 1ea:	10 92 61 00 	sts	0x0061, r1
			}
		break;
		}
	}
} 
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
