
twi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000034  00800060  00800060  0000064a  2**0
                  ALLOC
  2 .debug_aranges 000000a0  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000418  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001379  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000051a  00000000  00000000  00001e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000899  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002e3  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002b4  00000000  00000000  00003103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_17>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 39       	cpi	r26, 0x94	; 148
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  74:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <get_send_data>:

//Initiering, antal bytes mottagna eller skickade
volatile unsigned char bytes = 0;

unsigned char get_send_data(unsigned char index)
{
  7c:	ef e6       	ldi	r30, 0x6F	; 111
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	e8 0f       	add	r30, r24
  82:	f1 1d       	adc	r31, r1
	return from_sensor_data[index];
}
  84:	80 81       	ld	r24, Z
  86:	08 95       	ret

00000088 <set_send_data>:

void set_send_data(unsigned char index, unsigned char data)
{
	from_sensor_data[index] = data;
  88:	ef e6       	ldi	r30, 0x6F	; 111
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	e8 0f       	add	r30, r24
  8e:	f1 1d       	adc	r31, r1
  90:	60 83       	st	Z, r22
}
  92:	08 95       	ret

00000094 <TWIslave_init>:

//Initiering av TWI:n
void TWIslave_init()
{
//	TWBR = 0x20;
	TWAR = (SLAVE_ADRESS<<1);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	82 b9       	out	0x02, r24	; 2
	//ställ in TWI-srreg så att den skickar ack när den addreseras
	TWCR = (1<<TWEN)|(1<<TWIE)|(0<<TWINT)|
  98:	85 e4       	ldi	r24, 0x45	; 69
  9a:	86 bf       	out	0x36, r24	; 54
		   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
           (0<<TWWC);
}
  9c:	08 95       	ret

0000009e <interpret_data>:

void interpret_data()
{
	//Första byten i sändningen är alltid för att
	//avgöra vilken typ av data som skall skickas
	switch(data[0])
  9e:	80 91 75 00 	lds	r24, 0x0075
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	c1 f4       	brne	.+48     	; 0xd6 <interpret_data+0x38>
	return from_sensor_data[index];
}

void set_send_data(unsigned char index, unsigned char data)
{
	from_sensor_data[index] = data;
  a6:	80 91 63 00 	lds	r24, 0x0063
  aa:	80 93 6f 00 	sts	0x006F, r24
  ae:	80 91 64 00 	lds	r24, 0x0064
  b2:	80 93 70 00 	sts	0x0070, r24
  b6:	80 91 65 00 	lds	r24, 0x0065
  ba:	80 93 71 00 	sts	0x0071, r24
  be:	80 91 66 00 	lds	r24, 0x0066
  c2:	80 93 72 00 	sts	0x0072, r24
  c6:	80 91 67 00 	lds	r24, 0x0067
  ca:	80 93 73 00 	sts	0x0073, r24
  ce:	80 91 68 00 	lds	r24, 0x0068
  d2:	80 93 74 00 	sts	0x0074, r24
  d6:	08 95       	ret

000000d8 <__vector_17>:

//Tar ej emot några general calls. Är villig hela tiden
//(säger inte nej till en sändning/mottagning)

ISR(TWI_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	switch(TWSR & 0xF8)
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	90 70       	andi	r25, 0x00	; 0
 102:	88 38       	cpi	r24, 0x88	; 136
 104:	91 05       	cpc	r25, r1
 106:	49 f1       	breq	.+82     	; 0x15a <__vector_17+0x82>
 108:	89 38       	cpi	r24, 0x89	; 137
 10a:	91 05       	cpc	r25, r1
 10c:	5c f4       	brge	.+22     	; 0x124 <__vector_17+0x4c>
 10e:	88 36       	cpi	r24, 0x68	; 104
 110:	91 05       	cpc	r25, r1
 112:	e9 f0       	breq	.+58     	; 0x14e <__vector_17+0x76>
 114:	80 38       	cpi	r24, 0x80	; 128
 116:	91 05       	cpc	r25, r1
 118:	01 f1       	breq	.+64     	; 0x15a <__vector_17+0x82>
 11a:	80 36       	cpi	r24, 0x60	; 96
 11c:	91 05       	cpc	r25, r1
 11e:	09 f0       	breq	.+2      	; 0x122 <__vector_17+0x4a>
 120:	6a c0       	rjmp	.+212    	; 0x1f6 <__vector_17+0x11e>
 122:	13 c0       	rjmp	.+38     	; 0x14a <__vector_17+0x72>
 124:	88 3a       	cpi	r24, 0xA8	; 168
 126:	91 05       	cpc	r25, r1
 128:	99 f1       	breq	.+102    	; 0x190 <__vector_17+0xb8>
 12a:	89 3a       	cpi	r24, 0xA9	; 169
 12c:	91 05       	cpc	r25, r1
 12e:	2c f4       	brge	.+10     	; 0x13a <__vector_17+0x62>
 130:	80 3a       	cpi	r24, 0xA0	; 160
 132:	91 05       	cpc	r25, r1
 134:	09 f0       	breq	.+2      	; 0x138 <__vector_17+0x60>
 136:	5f c0       	rjmp	.+190    	; 0x1f6 <__vector_17+0x11e>
 138:	22 c0       	rjmp	.+68     	; 0x17e <__vector_17+0xa6>
 13a:	88 3b       	cpi	r24, 0xB8	; 184
 13c:	91 05       	cpc	r25, r1
 13e:	59 f1       	breq	.+86     	; 0x196 <__vector_17+0xbe>
 140:	88 3c       	cpi	r24, 0xC8	; 200
 142:	91 05       	cpc	r25, r1
 144:	09 f0       	breq	.+2      	; 0x148 <__vector_17+0x70>
 146:	57 c0       	rjmp	.+174    	; 0x1f6 <__vector_17+0x11e>
 148:	4d c0       	rjmp	.+154    	; 0x1e4 <__vector_17+0x10c>
	{
		// SLAVE RECEIVER
		//---------------------------------------------------------
		//SLA+W mottagen, ACK skickad
		case TW_SR_SLA_ACK:
			bytes = 0;
 14a:	10 92 60 00 	sts	0x0060, r1
		case TW_SR_ARB_LOST_SLA_ACK:
	
		//om ej data vill sändas
	
			//Tag emot data och skicka ACK
			TWCR |= (1<<TWINT)|(1<<TWEA);
 14e:	86 b7       	in	r24, 0x36	; 54
 150:	80 6c       	ori	r24, 0xC0	; 192
 152:	86 bf       	out	0x36, r24	; 54
			TWCR &= ~(1<<TWSTO);                
 154:	86 b7       	in	r24, 0x36	; 54
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	53 c0       	rjmp	.+166    	; 0x200 <__vector_17+0x128>
			}
		break; 

		case TW_SR_DATA_NACK:
			//Spara ner data
			data[bytes] = TWDR;
 15a:	e0 91 60 00 	lds	r30, 0x0060
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	83 b1       	in	r24, 0x03	; 3
 162:	eb 58       	subi	r30, 0x8B	; 139
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	80 83       	st	Z, r24
			
			//Om den kan ta emot mer data, skicka ack
			if(bytes < MAX_DATA_BYTES)
 168:	80 91 60 00 	lds	r24, 0x0060
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	08 f0       	brcs	.+2      	; 0x172 <__vector_17+0x9a>
 170:	48 c0       	rjmp	.+144    	; 0x202 <__vector_17+0x12a>
			{
				//Tag emot data och skicka ACK
				TWCR |= (1<<TWINT)|(1<<TWEA);
 172:	86 b7       	in	r24, 0x36	; 54
 174:	80 6c       	ori	r24, 0xC0	; 192
 176:	86 bf       	out	0x36, r24	; 54
				TWCR &= ~(1<<TWSTO);
 178:	86 b7       	in	r24, 0x36	; 54
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	1c c0       	rjmp	.+56     	; 0x1b6 <__vector_17+0xde>

		//Stop eller upprepad start när man är addreserad
		case TW_SR_STOP:

			//Tag emot framtida meddelanden
			TWCR |= (1<<TWINT)|(1<<TWEA);
 17e:	86 b7       	in	r24, 0x36	; 54
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	86 bf       	out	0x36, r24	; 54
			TWCR &= ~(1<<TWSTO);
 184:	86 b7       	in	r24, 0x36	; 54
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	86 bf       	out	0x36, r24	; 54
				
			//Behandla meddelandet
			interpret_data();
 18a:	0e 94 4f 00 	call	0x9e	; 0x9e <interpret_data>
 18e:	39 c0       	rjmp	.+114    	; 0x202 <__vector_17+0x12a>
		// SLAVE TRANSMITTER
		//---------------------------------------------------------
	
		//Egen SLA+R mottagen, ACK skickad
		case TW_ST_SLA_ACK:
			bytes = 0;
 190:	10 92 60 00 	sts	0x0060, r1
 194:	04 c0       	rjmp	.+8      	; 0x19e <__vector_17+0xc6>
			bytes += 1;               
		break;
			//Data skickad, ACK mottagen
		case TW_ST_DATA_ACK:
			//Skicka data och tag emot ack
			if(bytes < MAX_DATA_BYTES - 1)
 196:	80 91 60 00 	lds	r24, 0x0060
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	98 f4       	brcc	.+38     	; 0x1c4 <__vector_17+0xec>
			{
				TWDR = get_send_data(bytes);
 19e:	e0 91 60 00 	lds	r30, 0x0060
//Initiering, antal bytes mottagna eller skickade
volatile unsigned char bytes = 0;

unsigned char get_send_data(unsigned char index)
{
	return from_sensor_data[index];
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e1 59       	subi	r30, 0x91	; 145
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 81       	ld	r24, Z
			//Data skickad, ACK mottagen
		case TW_ST_DATA_ACK:
			//Skicka data och tag emot ack
			if(bytes < MAX_DATA_BYTES - 1)
			{
				TWDR = get_send_data(bytes);
 1aa:	83 b9       	out	0x03, r24	; 3
				TWCR &= ~(1<<TWSTO);
 1ac:	86 b7       	in	r24, 0x36	; 54
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT)|(1<<TWEA);
 1b2:	86 b7       	in	r24, 0x36	; 54
 1b4:	80 6c       	ori	r24, 0xC0	; 192
 1b6:	86 bf       	out	0x36, r24	; 54
				
				bytes += 1;
 1b8:	80 91 60 00 	lds	r24, 0x0060
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 60 00 	sts	0x0060, r24
 1c2:	1f c0       	rjmp	.+62     	; 0x202 <__vector_17+0x12a>
			}
			else
			{
 				TWDR = get_send_data(bytes);//from_sensor_data[bytes];
 1c4:	e0 91 60 00 	lds	r30, 0x0060
//Initiering, antal bytes mottagna eller skickade
volatile unsigned char bytes = 0;

unsigned char get_send_data(unsigned char index)
{
	return from_sensor_data[index];
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e1 59       	subi	r30, 0x91	; 145
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
				
				bytes += 1;
			}
			else
			{
 				TWDR = get_send_data(bytes);//from_sensor_data[bytes];
 1d0:	83 b9       	out	0x03, r24	; 3
				TWCR &= ~((1<<TWSTO) | (1<<TWEA));
 1d2:	86 b7       	in	r24, 0x36	; 54
 1d4:	8f 7a       	andi	r24, 0xAF	; 175
 1d6:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 1d8:	86 b7       	in	r24, 0x36	; 54
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	86 bf       	out	0x36, r24	; 54
				bytes = 0;
 1de:	10 92 60 00 	sts	0x0060, r1
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <__vector_17+0x12a>
			}
		break;

		case TW_ST_LAST_DATA:
			//Tag emot framtida meddelanden
			TWCR |= (1<<TWINT)|(1<<TWEA);
 1e4:	86 b7       	in	r24, 0x36	; 54
 1e6:	80 6c       	ori	r24, 0xC0	; 192
 1e8:	86 bf       	out	0x36, r24	; 54
			TWCR &= ~(1<<TWSTO);
 1ea:	86 b7       	in	r24, 0x36	; 54
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	86 bf       	out	0x36, r24	; 54
			read_sensors();
 1f0:	0e 94 1e 01 	call	0x23c	; 0x23c <read_sensors>
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <__vector_17+0x12a>
	
		break;

		default:
 			TWCR &= ~((1<<TWSTO)|(1<<TWEA));
 1f6:	86 b7       	in	r24, 0x36	; 54
 1f8:	8f 7a       	andi	r24, 0xAF	; 175
 1fa:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 1fc:	86 b7       	in	r24, 0x36	; 54
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	86 bf       	out	0x36, r24	; 54
			
		break;
	}

}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <ADCinit>:
//Direction anger vilken sensor som pekar framåt.
unsigned char direction = 0;

void ADCinit()
{
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0); // set adc-prescaler, set adc enable and adc interrupt enable
 224:	86 b1       	in	r24, 0x06	; 6
 226:	8b 68       	ori	r24, 0x8B	; 139
 228:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0) | (1 << ADLAR); // set adv vcc ref
 22a:	87 b1       	in	r24, 0x07	; 7
 22c:	80 66       	ori	r24, 0x60	; 96
 22e:	87 b9       	out	0x07, r24	; 7
	ADMUX |= adc_ch;
 230:	87 b1       	in	r24, 0x07	; 7
 232:	90 91 61 00 	lds	r25, 0x0061
 236:	89 2b       	or	r24, r25
 238:	87 b9       	out	0x07, r24	; 7
}
 23a:	08 95       	ret

0000023c <read_sensors>:

//läser av alla ir-sensorer och sparar ner dessa
void read_sensors()
{
	if(mode != read_mode)
 23c:	80 91 62 00 	lds	r24, 0x0062
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	61 f0       	breq	.+24     	; 0x25c <read_sensors+0x20>
	{
		mode = read_mode;
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 62 00 	sts	0x0062, r24
		TWCR &= ~(1<<TWEN);
 24a:	86 b7       	in	r24, 0x36	; 54
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	86 bf       	out	0x36, r24	; 54
		adc_ch = 0;
 250:	10 92 61 00 	sts	0x0061, r1
		ADMUX &= 0xE0;
 254:	87 b1       	in	r24, 0x07	; 7
 256:	80 7e       	andi	r24, 0xE0	; 224
 258:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1 << ADSC);
 25a:	36 9a       	sbi	0x06, 6	; 6
 25c:	08 95       	ret

0000025e <get_measurements>:
	}

}

unsigned char get_measurements(unsigned char sensor)
{
 25e:	e3 e6       	ldi	r30, 0x63	; 99
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	e8 0f       	add	r30, r24
 264:	f1 1d       	adc	r31, r1
	return measurements[sensor];
}
 266:	80 81       	ld	r24, Z
 268:	08 95       	ret

0000026a <set_measurements>:

void set_measurements(unsigned char sensor, unsigned char data)
{
	measurements[sensor] = data;
 26a:	e3 e6       	ldi	r30, 0x63	; 99
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e8 0f       	add	r30, r24
 270:	f1 1d       	adc	r31, r1
 272:	60 83       	st	Z, r22
}
 274:	08 95       	ret

00000276 <__vector_14>:
}
*/


ISR(ADC_vect)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	//unsigned char direction_correction = direction;
	switch(mode)
 288:	80 91 62 00 	lds	r24, 0x0062
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	e1 f4       	brne	.+56     	; 0x2c8 <__vector_14+0x52>
	{	
		case read_mode:
		{
			
				unsigned char adc = ADCH;
 290:	85 b1       	in	r24, 0x05	; 5
				set_measurements(adc_ch, adc);
 292:	90 91 61 00 	lds	r25, 0x0061
	return measurements[sensor];
}

void set_measurements(unsigned char sensor, unsigned char data)
{
	measurements[sensor] = data;
 296:	e9 2f       	mov	r30, r25
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ed 59       	subi	r30, 0x9D	; 157
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 83       	st	Z, r24
		case read_mode:
		{
			
				unsigned char adc = ADCH;
				set_measurements(adc_ch, adc);
				if(adc_ch < 6)
 2a0:	96 30       	cpi	r25, 0x06	; 6
 2a2:	40 f4       	brcc	.+16     	; 0x2b4 <__vector_14+0x3e>
				{
					adc_ch += 1;
 2a4:	9f 5f       	subi	r25, 0xFF	; 255
 2a6:	90 93 61 00 	sts	0x0061, r25
					ADMUX += 1;
 2aa:	87 b1       	in	r24, 0x07	; 7
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	87 b9       	out	0x07, r24	; 7
					ADCSRA |= (1 << ADSC);
 2b0:	36 9a       	sbi	0x06, 6	; 6
 2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <__vector_14+0x52>

				}
				else
				{
					adc_ch = 0;
 2b4:	10 92 61 00 	sts	0x0061, r1
					ADMUX &= 0xE0;
 2b8:	87 b1       	in	r24, 0x07	; 7
 2ba:	80 7e       	andi	r24, 0xE0	; 224
 2bc:	87 b9       	out	0x07, r24	; 7
					mode = no_mode;
 2be:	10 92 62 00 	sts	0x0062, r1
					TWCR |= (1<<TWEN);
 2c2:	86 b7       	in	r24, 0x36	; 54
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	86 bf       	out	0x36, r24	; 54
		break;
		
	}

	//direction = direction_correction;
} 
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <main>:
#include <reglering.h>

int main()
{

	ADCinit();
 2da:	0e 94 12 01 	call	0x224	; 0x224 <ADCinit>
	sei();
 2de:	78 94       	sei
	read_sensors();
 2e0:	0e 94 1e 01 	call	0x23c	; 0x23c <read_sensors>
	TWIslave_init();
 2e4:	0e 94 4a 00 	call	0x94	; 0x94 <TWIslave_init>

	//-------------------------------
	//		Lite Test
	//-------------------------------

	DDRB = 0xFF;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	87 bb       	out	0x17, r24	; 23
	 
	 char TEMP;
	direction = 0;
 2ec:	10 92 6c 00 	sts	0x006C, r1
	for(;;)
	{	
		look_for_walls();
 2f0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <look_for_walls>
		TEMP = get_local_wall(1,1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	0e 94 ab 01 	call	0x356	; 0x356 <get_local_wall>
		PORTB = TEMP;
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	f8 cf       	rjmp	.-16     	; 0x2f0 <main+0x16>

00000300 <TIMER0init>:
#include <adc.h>

void TIMER0init()
{
	//ställ in timer-prescaler till clk/1024
	TCCR0 |= (1<<CS00)|(1<<CS02);
 300:	83 b7       	in	r24, 0x33	; 51
 302:	85 60       	ori	r24, 0x05	; 5
 304:	83 bf       	out	0x33, r24	; 51

	//enable interruptflagga ifall timern får
	//overflow
	TIMSK |= (1<<TOIE0);
 306:	89 b7       	in	r24, 0x39	; 57
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	89 bf       	out	0x39, r24	; 57
}
 30c:	08 95       	ret

0000030e <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	read_sensors();
 330:	0e 94 1e 01 	call	0x23c	; 0x23c <read_sensors>
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <get_local_wall>:
//De styrdata som ska skickas till styrenheten
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	e8 0f       	add	r30, r24
 360:	f9 1f       	adc	r31, r25
 362:	e6 0f       	add	r30, r22
 364:	f1 1d       	adc	r31, r1
 366:	ee 57       	subi	r30, 0x7E	; 126
 368:	ff 4f       	sbci	r31, 0xFF	; 255
	return local_walls[x][y];
}
 36a:	80 81       	ld	r24, Z
 36c:	08 95       	ret

0000036e <set_local_wall>:
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 36e:	26 2f       	mov	r18, r22
 370:	22 95       	swap	r18
 372:	2f 70       	andi	r18, 0x0F	; 15
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	6f 70       	andi	r22, 0x0F	; 15
 378:	f9 01       	movw	r30, r18
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	e2 0f       	add	r30, r18
 380:	f3 1f       	adc	r31, r19
 382:	e6 0f       	add	r30, r22
 384:	f1 1d       	adc	r31, r1
 386:	ee 57       	subi	r30, 0x7E	; 126
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	90 81       	ld	r25, Z
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 38c:	98 2b       	or	r25, r24
 38e:	90 83       	st	Z, r25
}
 390:	08 95       	ret

00000392 <get_local_searched>:

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	fc 01       	movw	r30, r24
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	e8 0f       	add	r30, r24
 39c:	f9 1f       	adc	r31, r25
 39e:	e6 0f       	add	r30, r22
 3a0:	f1 1d       	adc	r31, r1
 3a2:	e5 57       	subi	r30, 0x75	; 117
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
	return local_searched[x][y];
}
 3a6:	80 81       	ld	r24, Z
 3a8:	08 95       	ret

000003aa <set_local_searched>:
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 3aa:	26 2f       	mov	r18, r22
 3ac:	22 95       	swap	r18
 3ae:	2f 70       	andi	r18, 0x0F	; 15
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	6f 70       	andi	r22, 0x0F	; 15
 3b4:	f9 01       	movw	r30, r18
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	e2 0f       	add	r30, r18
 3bc:	f3 1f       	adc	r31, r19
 3be:	e6 0f       	add	r30, r22
 3c0:	f1 1d       	adc	r31, r1
 3c2:	e5 57       	subi	r30, 0x75	; 117
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	90 81       	ld	r25, Z
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 3c8:	98 2b       	or	r25, r24
 3ca:	90 83       	st	Z, r25
}
 3cc:	08 95       	ret

000003ce <modulo_6>:

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 3ce:	86 30       	cpi	r24, 0x06	; 6
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <modulo_6+0x6>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
	{
		value = 0;
	}
	return value;
}
 3d4:	08 95       	ret

000003d6 <look_for_front_wall>:

void look_for_front_wall(unsigned char front)
{
 3d6:	98 2f       	mov	r25, r24
	if((front < (wall_dist_1 + marginal)) && (front > (wall_dist_1 - marginal)))
 3d8:	8a 54       	subi	r24, 0x4A	; 74
 3da:	8f 31       	cpi	r24, 0x1F	; 31
 3dc:	58 f4       	brcc	.+22     	; 0x3f4 <look_for_front_wall+0x1e>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 3de:	80 91 86 00 	lds	r24, 0x0086
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	80 93 86 00 	sts	0x0086, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 3e8:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 3ec:	84 60       	ori	r24, 0x04	; 4
 3ee:	80 93 8f 00 	sts	0x008F, r24
 3f2:	08 95       	ret
	if((front < (wall_dist_1 + marginal)) && (front > (wall_dist_1 - marginal)))
	{
		set_local_wall(wall_f,0x11);
		set_local_searched(wall_f,0x11);
	}
	else if((front < (wall_dist_2 + marginal)) && (front > (wall_dist_2 - marginal)))
 3f4:	91 3f       	cpi	r25, 0xF1	; 241
 3f6:	28 f0       	brcs	.+10     	; 0x402 <look_for_front_wall+0x2c>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 3f8:	80 91 87 00 	lds	r24, 0x0087
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	80 93 87 00 	sts	0x0087, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 402:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 406:	84 60       	ori	r24, 0x04	; 4
 408:	80 93 8f 00 	sts	0x008F, r24
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 40c:	80 91 90 00 	lds	r24, 0x0090
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 410:	84 60       	ori	r24, 0x04	; 4
 412:	80 93 90 00 	sts	0x0090, r24
 416:	08 95       	ret

00000418 <look_for_left_wall>:
	}
}

void look_for_left_wall(unsigned char left_1, unsigned char left_2)
{
	if(((left_1 < (side_wall_dist_1 + marginal)) && (left_1 > (side_wall_dist_1 - marginal)))
 418:	81 54       	subi	r24, 0x41	; 65
 41a:	8f 31       	cpi	r24, 0x1F	; 31
 41c:	18 f0       	brcs	.+6      	; 0x424 <look_for_left_wall+0xc>
 41e:	61 54       	subi	r22, 0x41	; 65
 420:	6f 31       	cpi	r22, 0x1F	; 31
 422:	58 f4       	brcc	.+22     	; 0x43a <look_for_left_wall+0x22>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 424:	80 91 86 00 	lds	r24, 0x0086
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 428:	88 60       	ori	r24, 0x08	; 8
 42a:	80 93 86 00 	sts	0x0086, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 42e:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 432:	88 60       	ori	r24, 0x08	; 8
 434:	80 93 8f 00 	sts	0x008F, r24
 438:	08 95       	ret
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 43a:	80 91 8d 00 	lds	r24, 0x008D
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 43e:	88 60       	ori	r24, 0x08	; 8
 440:	80 93 8d 00 	sts	0x008D, r24
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 444:	90 91 8c 00 	lds	r25, 0x008C
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 448:	20 91 8f 00 	lds	r18, 0x008F
 44c:	80 91 8b 00 	lds	r24, 0x008B
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 93 8b 00 	sts	0x008B, r24
		}
	}
}

void look_for_back_wall(unsigned char back)
{
 456:	95 60       	ori	r25, 0x05	; 5
 458:	90 93 8c 00 	sts	0x008C, r25
 45c:	28 60       	ori	r18, 0x08	; 8
 45e:	20 93 8f 00 	sts	0x008F, r18
 462:	08 95       	ret

00000464 <look_for_back_wall>:
 464:	98 2f       	mov	r25, r24
	if((back < (wall_dist_1 + marginal)) && (back > (wall_dist_1 - marginal)))
 466:	8a 54       	subi	r24, 0x4A	; 74
 468:	8f 31       	cpi	r24, 0x1F	; 31
 46a:	58 f4       	brcc	.+22     	; 0x482 <look_for_back_wall+0x1e>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 46c:	80 91 86 00 	lds	r24, 0x0086
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 470:	81 60       	ori	r24, 0x01	; 1
 472:	80 93 86 00 	sts	0x0086, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 476:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 93 8f 00 	sts	0x008F, r24
 480:	08 95       	ret
	if((back < (wall_dist_1 + marginal)) && (back > (wall_dist_1 - marginal)))
	{
		set_local_wall(wall_b,0x11);
		set_local_searched(wall_b,0x11);
	}
	else if((back < (wall_dist_2 + marginal)) && (back > (wall_dist_2 - marginal)))
 482:	91 3f       	cpi	r25, 0xF1	; 241
 484:	78 f0       	brcs	.+30     	; 0x4a4 <look_for_back_wall+0x40>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 486:	80 91 85 00 	lds	r24, 0x0085
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 48a:	81 60       	ori	r24, 0x01	; 1
 48c:	80 93 85 00 	sts	0x0085, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 490:	80 91 8e 00 	lds	r24, 0x008E
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 93 8e 00 	sts	0x008E, r24
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 49a:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 93 8f 00 	sts	0x008F, r24
 4a4:	08 95       	ret

000004a6 <look_for_right_wall>:
 }

void look_for_right_wall(unsigned char right_1, unsigned char right_2)
{

	if(((right_1 < (side_wall_dist_1 + marginal)) && (right_1 > (side_wall_dist_1 - marginal)))
 4a6:	81 54       	subi	r24, 0x41	; 65
 4a8:	8f 31       	cpi	r24, 0x1F	; 31
 4aa:	18 f0       	brcs	.+6      	; 0x4b2 <look_for_right_wall+0xc>
 4ac:	61 54       	subi	r22, 0x41	; 65
 4ae:	6f 31       	cpi	r22, 0x1F	; 31
 4b0:	58 f4       	brcc	.+22     	; 0x4c8 <look_for_right_wall+0x22>
unsigned char movement_data[6];


unsigned char get_local_wall(unsigned char x, unsigned char y)
{
	return local_walls[x][y];
 4b2:	80 91 86 00 	lds	r24, 0x0086
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_wall(x,y);
	temp |= wall;
	local_walls[x][y] = temp;
 4b6:	82 60       	ori	r24, 0x02	; 2
 4b8:	80 93 86 00 	sts	0x0086, r24
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 4bc:	80 91 8f 00 	lds	r24, 0x008F
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	80 93 8f 00 	sts	0x008F, r24
 4c6:	08 95       	ret
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 4c8:	80 91 91 00 	lds	r24, 0x0091
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	80 93 91 00 	sts	0x0091, r24
	local_walls[x][y] = temp;
}

unsigned char get_local_searched(unsigned char x, unsigned char y)
{
	return local_searched[x][y];
 4d2:	90 91 92 00 	lds	r25, 0x0092
	unsigned char x = (pos & 0xF0) >> 4;
	unsigned char y = (pos & 0x0F);

	unsigned char temp = get_local_searched(x,y);
	temp |= wall;
	local_searched[x][y] = temp;
 4d6:	20 91 8f 00 	lds	r18, 0x008F
 4da:	80 91 93 00 	lds	r24, 0x0093
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	80 93 93 00 	sts	0x0093, r24
		reglering = 0;
	}

	
	//Ska skicka regleringen till styrenheten
	movement_data[0] = 0; //Skicka bitar som säger att det är regleringen som ska skickas
 4e4:	95 60       	ori	r25, 0x05	; 5
 4e6:	90 93 92 00 	sts	0x0092, r25
 4ea:	22 60       	ori	r18, 0x02	; 2
 4ec:	20 93 8f 00 	sts	0x008F, r18
 4f0:	08 95       	ret

000004f2 <reglera>:
 4f2:	10 92 7b 00 	sts	0x007B, r1
	movement_data[1] = reglering;
 4f6:	10 92 7c 00 	sts	0x007C, r1
	//Kan vi skicka reglering om det är ett negativt värde, hur löser man detta?
}
 4fa:	08 95       	ret

000004fc <start_up_routine>:

void start_up_routine()
{
	//Denna behöver endast göras en gång. Sedan ges sidoväggen av hur den rör sig.
	//decide_side_wall();
}
 4fc:	08 95       	ret

000004fe <look_for_walls>:
//Funktionen förutsätter att measurements[][] på rad 0 innehåller de data som skall utvärderas
//Funktionen kräver även mer eller mindre att man befinner sig mitt en den ruta man vill mäta
//annars krävs en större marginal krävas vilket skulle kunne leda till att vissa väggars 
//intervall överlappar. Det är 34 cm mellan side_wall_dist_1 och wall_dist_3 vilka är de mest kritiska
void look_for_walls()
{
 4fe:	1f 93       	push	r17
	//read_sensors();
	sensor_index = direction;
 500:	80 91 6c 00 	lds	r24, 0x006C
 504:	80 93 81 00 	sts	0x0081, r24
	local_walls[1][1] = 0;	
 508:	10 92 86 00 	sts	0x0086, r1
	//FRONT
	unsigned char front = get_measurements(sensor_index);
 50c:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
	look_for_front_wall(front);
 510:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <look_for_front_wall>



	//LEFT
	sensor_index++;
 514:	80 91 81 00 	lds	r24, 0x0081
 518:	8f 5f       	subi	r24, 0xFF	; 255
	local_searched[x][y] = temp;
}

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 51a:	86 30       	cpi	r24, 0x06	; 6
 51c:	08 f0       	brcs	.+2      	; 0x520 <look_for_walls+0x22>
 51e:	80 e0       	ldi	r24, 0x00	; 0



	//LEFT
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
 520:	80 93 81 00 	sts	0x0081, r24
	unsigned char left_1 = get_measurements(sensor_index);
 524:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
 528:	18 2f       	mov	r17, r24
	sensor_index++;
 52a:	80 91 81 00 	lds	r24, 0x0081
 52e:	8f 5f       	subi	r24, 0xFF	; 255
	local_searched[x][y] = temp;
}

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 530:	86 30       	cpi	r24, 0x06	; 6
 532:	08 f0       	brcs	.+2      	; 0x536 <look_for_walls+0x38>
 534:	80 e0       	ldi	r24, 0x00	; 0
	//LEFT
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
	unsigned char left_1 = get_measurements(sensor_index);
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
 536:	80 93 81 00 	sts	0x0081, r24
	unsigned char left_2 = get_measurements(sensor_index);
 53a:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
 53e:	68 2f       	mov	r22, r24
	look_for_left_wall(left_1, left_2);	
 540:	81 2f       	mov	r24, r17
 542:	0e 94 0c 02 	call	0x418	; 0x418 <look_for_left_wall>

	//BACK
	sensor_index++;
 546:	80 91 81 00 	lds	r24, 0x0081
 54a:	8f 5f       	subi	r24, 0xFF	; 255
	local_searched[x][y] = temp;
}

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 54c:	86 30       	cpi	r24, 0x06	; 6
 54e:	08 f0       	brcs	.+2      	; 0x552 <look_for_walls+0x54>
 550:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char left_2 = get_measurements(sensor_index);
	look_for_left_wall(left_1, left_2);	

	//BACK
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
 552:	80 93 81 00 	sts	0x0081, r24
	unsigned char back = get_measurements(sensor_index);
 556:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
	look_for_back_wall(back);
 55a:	0e 94 32 02 	call	0x464	; 0x464 <look_for_back_wall>

	//RIGHT
	sensor_index++;
 55e:	80 91 81 00 	lds	r24, 0x0081
 562:	8f 5f       	subi	r24, 0xFF	; 255
	local_searched[x][y] = temp;
}

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 564:	86 30       	cpi	r24, 0x06	; 6
 566:	08 f0       	brcs	.+2      	; 0x56a <look_for_walls+0x6c>
 568:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char back = get_measurements(sensor_index);
	look_for_back_wall(back);

	//RIGHT
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
 56a:	80 93 81 00 	sts	0x0081, r24
	unsigned char right_1 = get_measurements(sensor_index);
 56e:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
 572:	18 2f       	mov	r17, r24
	sensor_index++;
 574:	80 91 81 00 	lds	r24, 0x0081
 578:	8f 5f       	subi	r24, 0xFF	; 255
	local_searched[x][y] = temp;
}

unsigned char modulo_6(unsigned char value)
{
	if (value > 5)
 57a:	86 30       	cpi	r24, 0x06	; 6
 57c:	08 f0       	brcs	.+2      	; 0x580 <look_for_walls+0x82>
 57e:	80 e0       	ldi	r24, 0x00	; 0
	//RIGHT
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
	unsigned char right_1 = get_measurements(sensor_index);
	sensor_index++;
	sensor_index = modulo_6(sensor_index);
 580:	80 93 81 00 	sts	0x0081, r24
	unsigned char right_2 = get_measurements(sensor_index);
 584:	0e 94 2f 01 	call	0x25e	; 0x25e <get_measurements>
 588:	68 2f       	mov	r22, r24
	look_for_right_wall(right_1, right_2);
 58a:	81 2f       	mov	r24, r17
 58c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <look_for_right_wall>

	//Skicka inte skiten till Svante här
	//Vänta tills roboten har tänkt lite på de eventuella luckor 
	//den kan täppa till med lite tankekraft			
}
 590:	1f 91       	pop	r17
 592:	08 95       	ret

00000594 <movement_direction>:
}
	 
//Funktion som säger hur roboten skall rör sig.
void movement_direction()
{
	look_for_walls();
 594:	0e 94 7f 02 	call	0x4fe	; 0x4fe <look_for_walls>
	
	//Kolla om vi har en vägg till höger
	if((get_local_wall(1,1) & 0b0010) >> 1)
 598:	80 91 86 00 	lds	r24, 0x0086
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	9c 01       	movw	r18, r24
 5a0:	24 70       	andi	r18, 0x04	; 4
 5a2:	30 70       	andi	r19, 0x00	; 0
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <movement_direction+0x22>
	{
		//Kolla om det finns en vägg framör näsan
		if ((get_local_wall(1,1) & 0b0100) >> 2)
 5a8:	23 2b       	or	r18, r19
 5aa:	39 f4       	brne	.+14     	; 0x5ba <movement_direction+0x26>

			//inte tillräckligt med info för att bestämma 
			}
		}
		//Kolla om vi har en återvändsgränd framåt, men eventuellt missar en vägg.
		else if ((get_local_wall(0,1) & 0b0100) >> 2)
 5ac:	80 91 83 00 	lds	r24, 0x0083
 5b0:	82 ff       	sbrs	r24, 2
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <movement_direction+0x32>
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <movement_direction+0x26>
	}
	//Om vi inte har en vägg till höger
	else
	{
		//Kolla om det finns en vägg framör näsan
		if ((get_local_wall(1,1) & 0b0100) >> 2)
 5b6:	23 2b       	or	r18, r19
 5b8:	11 f0       	breq	.+4      	; 0x5be <movement_direction+0x2a>
		{
			//IOM att vi vet att det inte finns en vägg till höger
			//Har vi i det här läget en återvändsgränd där.

			//Sväng vänster
			movement_data[0] = 4;
 5ba:	84 e0       	ldi	r24, 0x04	; 4
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <movement_direction+0x38>

		}
		//Kolla om vi ser in i en återvändsgtränd till höger
		else if ((get_local_wall(2,1) & 0b0100) >> 2)
 5be:	80 91 89 00 	lds	r24, 0x0089
 5c2:	82 ff       	sbrs	r24, 2
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <movement_direction+0x36>
		{
			//IOM att vi inte hade en vägg framför oss
			
			//Gå framåt
			movement_data[0] = 2;
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <movement_direction+0x38>
		}
		//Vi har hittat ett ytterhörn och skall svänga höger
		else 
		{
			//Sväng höger
			movement_data[0] = 5;
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	80 93 7b 00 	sts	0x007B, r24
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
